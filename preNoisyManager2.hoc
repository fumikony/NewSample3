load_file("stringHoc.hoc")

nrnpython("import neuron")
nrnpython("from neuron import h")
nrnpython("import NormRand")

begintemplate preNoisyManager

//method
public init
public makeNormRand
public getEta
public initPreNoise
public progressStep

//value
public NCELL,TSTOP,BIN,MAX_BIN
public nowTime,nowBin
objref etaList
objref sh


proc init(){
    TSTOP = $1
    NCELL = 86
    BIN = 250
    MAX_BIN = 100
    nowTime = 0
    nowBin = 1
    sh = new stringHoc()
    loadNormRand()
}

//============================================
//makeNormRand()
//Arg	null 
//Rtn	null
//Smr	Generates the normal random number
//	newly.
//	Please refer to NormRand.py
//	for details.
//============================================
proc makeNormRand(){local seedNumber localobj py
    seedNumber = $1
    py = new PythonObject()
    py.seedNumber = seedNumber
    nrnpython("NormRand.startCNR(seedNumber)")
}

//============================================
//getEta()
//Arg	null 
//Rtn	null
//Smr	null
//============================================
func getEta(){local inputTime
    return etaList.object(nowTime/dt).x($1)
}

//============================================
//initPreNoise()
//Arg	null
//Rtn	null
//Smr	init
//============================================
proc initPreNoise(){
    nowTime = 0
    nowBin = 1
    updateNormRand()
}

//============================================
//progressStep
//Arg	null 
//Rtn	null
//Smr	step
//============================================
proc progressStep(){
    nowTime = nowTime + dt
    //printf("nowTime = %f\n",nowTime)
    if(nowTime >= BIN-dt){
	nowTime = 0
	nowBin = nowBin + 1
	if(nowBin > MAX_BIN){
	    nowBin = 1
	}
	updateNormRand()
    }
}

//============================================
//loadNormRand
//Arg	null 
//Rtn	null
//Smr	This function reads a random 
//	  number every 250msec. 
//	The files to read differ every 250msec. 
//	There are 20 totals of a file. 
//	The 1st file is read when reading
//	  the 21st piece. 
//============================================
proc loadNormRand(){local cellCounter,timeCounter,tgtTime,etaValue localobj tmpList,etaf
    etaList = new List()
    etaf = new File()
    
    sh.int2str(nowBin)
    sh.strcat("../EtaList/EtaList",sh.int2strResult)
    sh.strcat(sh.strcatResult,".txt")
    etaf.ropen(sh.strcatResult)  

    for timeCounter = 0,(BIN / dt) - 1{
	//printf("timeCounter = %f\n",timeCounter)
	tmpList = new Vector()
	for cellCounter = 0,NCELL - 1{
	    etaValue = etaf.scanvar()
	    tmpList.append(etaValue)
	}
	etaList.append(tmpList)
    }
    
    etaf.close()
}

proc initList(){local etaCounter,vecCounter
    for etaCounter = 0,etaList.count() - 1{
	for vecCounter = 0,etaList.object(etaCounter).size() - 1{
	    etaList.object(etaCounter).remove(vecCounter)
	}
    }
    etaList.remove_all()
}

//============================================
//loadNormRand
//Arg	null 
//Rtn	null
//Smr	This function reads a random 
//	  number every 250msec. 
//	The files to read differ every 250msec. 
//	There are 20 totals of a file. 
//	The 1st file is read when reading
//	  the 21st piece. 
//
//	In one simulation, if loadNormRand
//	was called once. the rest should call
//	this all the time.
//============================================
proc updateNormRand(){local cellCounter,timeCounter,tgtTime,etaValue localobj tmpList,etaf
    // initList()
    etaList.remove_all()
    etaf = new File()
    
    sh.int2str(nowBin)
    sh.strcat("../EtaList/EtaList",sh.int2strResult)
    sh.strcat(sh.strcatResult,".txt")
    etaf.ropen(sh.strcatResult)

    for timeCounter = 0,(BIN / dt) - 1{
	//printf("timeCounter = %f\n",timeCounter)
	tmpList = new Vector()
	for cellCounter = 0,NCELL - 1{
	    etaValue = etaf.scanvar()
	    tmpList.append(etaValue)
	}
	etaList.append(tmpList)
    }
    
    etaf.close()
}

endtemplate preNoisyManager